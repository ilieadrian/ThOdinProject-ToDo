(()=>{"use strict";var n={208:(n,t,e)=>{e.d(t,{A:()=>f});var o=e(354),r=e.n(o),i=e(314),a=e.n(i),d=e(417),c=e.n(d),l=new URL(e(569),e.b),s=new URL(e(984),e.b),A=a()(r()),u=c()(l),m=c()(s);A.push([n.id,`@font-face {\n  font-family: "main-font";\n  src: url(${u}) format("truetype");\n  font-style: normal;\n}\n\n@font-face {\n  font-family: "bold-font";\n  src: url(${m}) format("truetype");\n  font-style: normal;\n}\n\n/* General styles */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  overflow-x: hidden;\n  /* overflow: hidden;  */\n}\n\nbody {\n  min-height: 100vh;\n  height: 100vh;\n  font-family: "main-font";\n  background-color: #2a9d8f;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  text-align: center;\n}\n\nli {\n  list-style: none;\n}\n\nimg {\n  max-width: 25px;\n  height: auto;\n}\n\nbutton {\n  max-width: 190px;\n  font-size: 1rem;\n  font-weight: 600;\n  background-color: #f7f7f7;\n  color: #501f3a;\n  border: 2px solid #501f3a;\n  padding: 0.75rem 1rem;\n  border-radius: 3px;\n}\n\nbutton:hover {\n  border: none;\n  cursor: pointer;\n  color: #f7f7f7;\n  background-color: #9f8693;\n}\n\n/* End of general styles */\n\n.container {\n  width: 1280px;\n  display: flex;\n  flex-direction: column;\n  background-color: #f7f7f7;\n  margin: 1rem;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px;\n}\n\n.header {\n  background-color: #c38d9e;\n  color: #f7f7f7;\n  padding: 0.5rem;\n  font-size: 2rem;\n  font-family: bold-font;\n  display: flex;\n  align-items: center;\n  justify-content: left;\n  letter-spacing: 0.3rem;\n  gap: 1rem;\n  border-top-right-radius: 5px;\n  border-top-left-radius: 5px;\n}\n\n.header img {\n  max-width: 50px;\n}\n\n.content-container {\n  display: flex;\n}\n\n@media only screen and (max-width: 624px) {\n  body {\n    height: 100%;\n  }\n  .content-container {\n    flex-direction: column;\n  }\n}\n\n.menu {\n  flex: 1;\n  background-color: #eeeeee;\n  border-right: 0.5px solid #b9b9b9;\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n  text-align: left;\n  border-bottom-left-radius: 5px;\n}\n\n.menu-links li {\n  margin-bottom: 1rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.number-of-tasks {\n  background-color: #c38d9e;\n  font-size: 0.8rem;\n  width: 1.5rem;\n  height: 1.5rem;\n  font-family: bold-font;\n  color: #f7f7ee;\n  padding: 0.5rem;\n  margin-right: 0.5rem;\n  border-radius: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.menu-links li a {\n  font-size: 1.5rem;\n  text-decoration: none;\n  color: #141414;\n}\n\n.menu-links .active,\n.menu-links a:hover {\n  font-family: bold-font;\n  color: #501f3a;\n}\n\n.menu-links .active::before,\n.menu-links a:hover::before {\n  content: "// ";\n}\n\n.menu-links,\n.todo-container {\n  width: 100%;\n  margin-bottom: 1rem;\n  border-bottom: 0.5px solid #b9b9b9;\n  overflow-y: auto;\n  position: relative;\n  scrollbar-width: thin;\n  scrollbar-color: #c38d9e #eeeeee;\n  height: 200px;\n}\n\n\n.todo-container {\n  min-height: 41rem;\n  flex: 4;\n  border-bottom: none;\n}\n\n.content-container h2 {\n  color: #141414;\n  margin-bottom: 1rem;\n}\n\n#projects-link {\n  text-decoration: none;\n  font-weight: 600;\n  color: #141414;\n}\n\n.addtodo,\n.addproject {\n  display: flex;\n  align-items: center;\n  align-content: center;\n}\n\n.addtodo p,\n.addproject p {\n  color: #c38d9e;\n  font-family: bold-font;\n  font-size: 1.2rem;\n}\n\n.addtodo p {\n  color: #501f3a;\n}\n\n.addtodo img,\n.addproject img {\n  max-width: 60px;\n  height: auto;\n  margin-right: 2rem;\n}\n\n.buttons-container {\n  margin-top: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  justify-content: center;\n}\n\n.emptyPageNotification {\n  margin: 2rem;\n}\n\n.items-list {\n  padding: 3rem;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.6rem;\n  overflow-y: auto;\n  position: relative;\n  scrollbar-width: thin;\n  scrollbar-color: #c38d9e #eeeeee;\n}\n\n#current-section {\n  position: absolute;\n  width: 150px;\n  max-width: 100%;\n  top: 0;\n  left: 0;\n  background-color: rgb(238, 238, 238);\n  padding: 0.4rem ;\n}\n\n#current-section p{\n  font-size: 1rem;\n}\n\n.item {\n  background-color: #eeeeee;\n  padding: 0.5rem 0.5rem 0.5rem 0;\n  height: 50px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.item:hover {\n  transform: scale(1.003);\n  transform-origin: 50% 50%;\n  box-shadow: 3px 3px 5px 2px rgba(0, 0, 0, 0.2);\n  transition: all 0.2s ease-out;\n}\n\n.action-grup,\n.name-grup {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n\n.priority {\n  height: 50px;\n  position: relative;\n}\n\n.priority.low {\n  background-color: #2a9d8f;\n}\n\n.priority.medium {\n  background-color: #ffa500;\n}\n\n.priority.high {\n  background-color: #ff0000;\n}\n\n.priority::before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 4px;\n  height: 100%;\n  background-color: inherit;\n}\n\n/* checkbox handlder */\ninput[type="checkbox"] {\n  width: 25px;\n  height: 25px;\n  accent-color: #2a9d8f;\n}\n\ninput[type="checkbox"] {\n  appearance: none;\n  -webkit-appearance: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  justify-items: center;\n  font-size: 2rem;\n  padding: 0.2rem;\n  border: 3px solid #2a9d8f;\n  border-radius: 0.3rem;\n  background-color: #f7f7f7;\n}\n\ninput[type="checkbox"]::before {\n  margin: 0 auto;\n  content: "";\n  width: 15px;\n  height: 15px;\n  clip-path: polygon(\n    20% 0%,\n    0% 20%,\n    30% 50%,\n    0% 80%,\n    20% 100%,\n    50% 70%,\n    80% 100%,\n    100% 80%,\n    70% 50%,\n    100% 20%,\n    80% 0%,\n    50% 30%\n  );\n  transform: scale(0);\n  background-color: #2a9d8f;\n}\n\ninput[type="checkbox"]:checked::before {\n  transform: scale(1);\n}\n/* endof checkbox handler */\n\n.finished.name-grup p {\n  text-decoration: line-through;\n  opacity: 0.4;\n}\n\n.finished.action-grup {\n  opacity: 0.4;\n}\n\n#due-date {\n  font-size: 0.8rem;\n}\n\n.action-grup button {\n  background-color: transparent;\n  min-width: 1px;\n  padding: 0.2rem;\n  border: 1px solid #501f3a;\n}\n\n.action-grup img:hover {\n  opacity: 0.6;\n}\n\n/* General & View Modal Styles */\n.modal {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  backdrop-filter: blur(8px);\n  z-index: 1;\n}\n\n.modal.active {\n  display: block;\n}\n\n.modal-content {\n  color: #501f3a;\n  background-color: #eeeeee;\n  padding: 2rem;\n  width: 80%;\n  max-width: 600px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  box-shadow: 3px 3px 20px 10px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n}\n\n.modal-content h2 {\n  margin-bottom: 1rem;\n}\n\n.detail {\n  display: flex;\n}\n\n.detail p {\n  display: inline-block;\n}\n.detail:first-of-type .detail-title {\n  margin-right: 1.1rem;\n}\n\n.detail:nth-of-type(2) .detail-title {\n  margin-right: 0.95rem;\n}\n\n.detail:nth-of-type(3) .detail-title {\n  margin-right: 0.35rem;\n}\n\n.detail:last-of-type .detail-title {\n  margin-right: 1.2rem;\n}\n\n.detail-title {\n  font-weight: bold;\n}\n\n.close-btn {\n  cursor: pointer;\n}\n\n.close-modal-button {\n  z-index: 1;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(-40%, 40%);\n}\n\n/* Add project modal & Todo modal*/\n\n#modal-header {\n  margin: -2rem -2rem 0 -2rem;\n  padding: 1rem;\n  background-color: #c38d9e;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#modal-header p {\n  color: #f7f7f7;\n  font-size: 1.5rem;\n  font-family: bold-font;\n}\n\n#add-project-modal > .modal-content,\n#add-modal-todo > .modal-content,\n#edit-modal-todo > .modal-content {\n  height: 35rem;\n  max-width: 50rem;\n  background-color: #f7f7f7;\n}\n\n#add-project-modal form,\n#add-modal-todo form,\n#edit-modal-todo form {\n  padding: 1rem;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.input-container {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n  color: #141414;\n}\n\n#add-modal-todo .input-container,\n#edit-modal-todo .input-container {\n  align-items: flex-start;\n}\n\n#add-project-modal form input[type="text"],\n#add-modal-todo form input[type="text"],\n#edit-modal-todo form input[type="text"],\nform input[type="date"],\nselect {\n  font-family: main-font;\n  font-size: 1rem;\n  border: none;\n  width: 100%;\n  padding: 0.5rem;\n  letter-spacing: 1px;\n  color: #141414;\n  background-color: white;\n}\n\n#add-modal-todo ul li,\n#edit-modal-todo ul li,\nselect {\n  width: 100%;\n  margin-top: 0.4rem;\n}\n\n#add-modal-todo ul li input,\n#edit-modal-todo ul li input {\n  margin-top: 0.3rem;\n}\n\n#add-project-modal form button,\n#add-modal-todo form button,\n#edit-modal-todo form button {\n  font-family: bold-font;\n  max-width: 8rem;\n  border: 1px solid #2a9d8f;\n  padding: 0.4rem 0.2rem;\n  color: #2a9d8f;\n  background-color: #f7f7f7;\n}\n\n#add-project-modal form button:hover,\n#add-modal-todo form button:hover,\n#edit-modal-todo form button:hover {\n  color: #f7f7f7;\n  background-color: #2a9d8f;\n}\n\n#add-modal-todo .button-container,\n#edit-modal-todo .button-container {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n\n#add-modal-todo .priority-btn-grup,\n#edit-modal-todo .priority-btn-grup {\n  display: flex;\n  gap: 0.8rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.priority-btn-grup button {\n  min-width: 4.5rem;\n}\n\n.priority-btn-grup #low {\n  color: #2a9d8f;\n  border-color: #2a9d8f;\n}\n\n.priority-btn-grup #low:hover,\n.priority-btn-grup #low.active-priority {\n  color: #f7f7f7;\n  background-color: #2a9d8f;\n}\n\n.priority-btn-grup #medium {\n  color: #ffa500;\n  border-color: #ffa500;\n}\n\n.priority-btn-grup #medium:hover,\n.priority-btn-grup #medium.active-priority {\n  color: #f7f7f7;\n  background-color: #ffa500;\n}\n\n.priority-btn-grup #high {\n  color: #ff0000;\n  border-color: #ff0000;\n}\n\n.priority-btn-grup #high:hover,\n.priority-btn-grup #high.active-priority {\n  color: #f7f7f7;\n  background-color: #ff0000;\n}\n\n/* Footer */\n.attribution {\n  text-align: center;\n  width: 100%;\n  padding-bottom: 0.3rem;\n  font-size: 0.7rem;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  z-index: 999;\n}\n\n.attribution a {\n  margin-left: 0.3rem;\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@font-face {\n  font-family: "main-font";\n  src: url("./fonts/OpenSans_Condensed-Regular.ttf") format("truetype");\n  font-style: normal;\n}\n\n@font-face {\n  font-family: "bold-font";\n  src: url(./fonts/OpenSans_SemiCondensed-Bold.ttf) format("truetype");\n  font-style: normal;\n}\n\n/* General styles */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  overflow-x: hidden;\n  /* overflow: hidden;  */\n}\n\nbody {\n  min-height: 100vh;\n  height: 100vh;\n  font-family: "main-font";\n  background-color: #2a9d8f;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  text-align: center;\n}\n\nli {\n  list-style: none;\n}\n\nimg {\n  max-width: 25px;\n  height: auto;\n}\n\nbutton {\n  max-width: 190px;\n  font-size: 1rem;\n  font-weight: 600;\n  background-color: #f7f7f7;\n  color: #501f3a;\n  border: 2px solid #501f3a;\n  padding: 0.75rem 1rem;\n  border-radius: 3px;\n}\n\nbutton:hover {\n  border: none;\n  cursor: pointer;\n  color: #f7f7f7;\n  background-color: #9f8693;\n}\n\n/* End of general styles */\n\n.container {\n  width: 1280px;\n  display: flex;\n  flex-direction: column;\n  background-color: #f7f7f7;\n  margin: 1rem;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px;\n}\n\n.header {\n  background-color: #c38d9e;\n  color: #f7f7f7;\n  padding: 0.5rem;\n  font-size: 2rem;\n  font-family: bold-font;\n  display: flex;\n  align-items: center;\n  justify-content: left;\n  letter-spacing: 0.3rem;\n  gap: 1rem;\n  border-top-right-radius: 5px;\n  border-top-left-radius: 5px;\n}\n\n.header img {\n  max-width: 50px;\n}\n\n.content-container {\n  display: flex;\n}\n\n@media only screen and (max-width: 624px) {\n  body {\n    height: 100%;\n  }\n  .content-container {\n    flex-direction: column;\n  }\n}\n\n.menu {\n  flex: 1;\n  background-color: #eeeeee;\n  border-right: 0.5px solid #b9b9b9;\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n  text-align: left;\n  border-bottom-left-radius: 5px;\n}\n\n.menu-links li {\n  margin-bottom: 1rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.number-of-tasks {\n  background-color: #c38d9e;\n  font-size: 0.8rem;\n  width: 1.5rem;\n  height: 1.5rem;\n  font-family: bold-font;\n  color: #f7f7ee;\n  padding: 0.5rem;\n  margin-right: 0.5rem;\n  border-radius: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.menu-links li a {\n  font-size: 1.5rem;\n  text-decoration: none;\n  color: #141414;\n}\n\n.menu-links .active,\n.menu-links a:hover {\n  font-family: bold-font;\n  color: #501f3a;\n}\n\n.menu-links .active::before,\n.menu-links a:hover::before {\n  content: "// ";\n}\n\n.menu-links,\n.todo-container {\n  width: 100%;\n  margin-bottom: 1rem;\n  border-bottom: 0.5px solid #b9b9b9;\n  overflow-y: auto;\n  position: relative;\n  scrollbar-width: thin;\n  scrollbar-color: #c38d9e #eeeeee;\n  height: 200px;\n}\n\n\n.todo-container {\n  min-height: 41rem;\n  flex: 4;\n  border-bottom: none;\n}\n\n.content-container h2 {\n  color: #141414;\n  margin-bottom: 1rem;\n}\n\n#projects-link {\n  text-decoration: none;\n  font-weight: 600;\n  color: #141414;\n}\n\n.addtodo,\n.addproject {\n  display: flex;\n  align-items: center;\n  align-content: center;\n}\n\n.addtodo p,\n.addproject p {\n  color: #c38d9e;\n  font-family: bold-font;\n  font-size: 1.2rem;\n}\n\n.addtodo p {\n  color: #501f3a;\n}\n\n.addtodo img,\n.addproject img {\n  max-width: 60px;\n  height: auto;\n  margin-right: 2rem;\n}\n\n.buttons-container {\n  margin-top: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  justify-content: center;\n}\n\n.emptyPageNotification {\n  margin: 2rem;\n}\n\n.items-list {\n  padding: 3rem;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.6rem;\n  overflow-y: auto;\n  position: relative;\n  scrollbar-width: thin;\n  scrollbar-color: #c38d9e #eeeeee;\n}\n\n#current-section {\n  position: absolute;\n  width: 150px;\n  max-width: 100%;\n  top: 0;\n  left: 0;\n  background-color: rgb(238, 238, 238);\n  padding: 0.4rem ;\n}\n\n#current-section p{\n  font-size: 1rem;\n}\n\n.item {\n  background-color: #eeeeee;\n  padding: 0.5rem 0.5rem 0.5rem 0;\n  height: 50px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.item:hover {\n  transform: scale(1.003);\n  transform-origin: 50% 50%;\n  box-shadow: 3px 3px 5px 2px rgba(0, 0, 0, 0.2);\n  transition: all 0.2s ease-out;\n}\n\n.action-grup,\n.name-grup {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n\n.priority {\n  height: 50px;\n  position: relative;\n}\n\n.priority.low {\n  background-color: #2a9d8f;\n}\n\n.priority.medium {\n  background-color: #ffa500;\n}\n\n.priority.high {\n  background-color: #ff0000;\n}\n\n.priority::before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 4px;\n  height: 100%;\n  background-color: inherit;\n}\n\n/* checkbox handlder */\ninput[type="checkbox"] {\n  width: 25px;\n  height: 25px;\n  accent-color: #2a9d8f;\n}\n\ninput[type="checkbox"] {\n  appearance: none;\n  -webkit-appearance: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  justify-items: center;\n  font-size: 2rem;\n  padding: 0.2rem;\n  border: 3px solid #2a9d8f;\n  border-radius: 0.3rem;\n  background-color: #f7f7f7;\n}\n\ninput[type="checkbox"]::before {\n  margin: 0 auto;\n  content: "";\n  width: 15px;\n  height: 15px;\n  clip-path: polygon(\n    20% 0%,\n    0% 20%,\n    30% 50%,\n    0% 80%,\n    20% 100%,\n    50% 70%,\n    80% 100%,\n    100% 80%,\n    70% 50%,\n    100% 20%,\n    80% 0%,\n    50% 30%\n  );\n  transform: scale(0);\n  background-color: #2a9d8f;\n}\n\ninput[type="checkbox"]:checked::before {\n  transform: scale(1);\n}\n/* endof checkbox handler */\n\n.finished.name-grup p {\n  text-decoration: line-through;\n  opacity: 0.4;\n}\n\n.finished.action-grup {\n  opacity: 0.4;\n}\n\n#due-date {\n  font-size: 0.8rem;\n}\n\n.action-grup button {\n  background-color: transparent;\n  min-width: 1px;\n  padding: 0.2rem;\n  border: 1px solid #501f3a;\n}\n\n.action-grup img:hover {\n  opacity: 0.6;\n}\n\n/* General & View Modal Styles */\n.modal {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  backdrop-filter: blur(8px);\n  z-index: 1;\n}\n\n.modal.active {\n  display: block;\n}\n\n.modal-content {\n  color: #501f3a;\n  background-color: #eeeeee;\n  padding: 2rem;\n  width: 80%;\n  max-width: 600px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  box-shadow: 3px 3px 20px 10px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n}\n\n.modal-content h2 {\n  margin-bottom: 1rem;\n}\n\n.detail {\n  display: flex;\n}\n\n.detail p {\n  display: inline-block;\n}\n.detail:first-of-type .detail-title {\n  margin-right: 1.1rem;\n}\n\n.detail:nth-of-type(2) .detail-title {\n  margin-right: 0.95rem;\n}\n\n.detail:nth-of-type(3) .detail-title {\n  margin-right: 0.35rem;\n}\n\n.detail:last-of-type .detail-title {\n  margin-right: 1.2rem;\n}\n\n.detail-title {\n  font-weight: bold;\n}\n\n.close-btn {\n  cursor: pointer;\n}\n\n.close-modal-button {\n  z-index: 1;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(-40%, 40%);\n}\n\n/* Add project modal & Todo modal*/\n\n#modal-header {\n  margin: -2rem -2rem 0 -2rem;\n  padding: 1rem;\n  background-color: #c38d9e;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#modal-header p {\n  color: #f7f7f7;\n  font-size: 1.5rem;\n  font-family: bold-font;\n}\n\n#add-project-modal > .modal-content,\n#add-modal-todo > .modal-content,\n#edit-modal-todo > .modal-content {\n  height: 35rem;\n  max-width: 50rem;\n  background-color: #f7f7f7;\n}\n\n#add-project-modal form,\n#add-modal-todo form,\n#edit-modal-todo form {\n  padding: 1rem;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.input-container {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n  color: #141414;\n}\n\n#add-modal-todo .input-container,\n#edit-modal-todo .input-container {\n  align-items: flex-start;\n}\n\n#add-project-modal form input[type="text"],\n#add-modal-todo form input[type="text"],\n#edit-modal-todo form input[type="text"],\nform input[type="date"],\nselect {\n  font-family: main-font;\n  font-size: 1rem;\n  border: none;\n  width: 100%;\n  padding: 0.5rem;\n  letter-spacing: 1px;\n  color: #141414;\n  background-color: white;\n}\n\n#add-modal-todo ul li,\n#edit-modal-todo ul li,\nselect {\n  width: 100%;\n  margin-top: 0.4rem;\n}\n\n#add-modal-todo ul li input,\n#edit-modal-todo ul li input {\n  margin-top: 0.3rem;\n}\n\n#add-project-modal form button,\n#add-modal-todo form button,\n#edit-modal-todo form button {\n  font-family: bold-font;\n  max-width: 8rem;\n  border: 1px solid #2a9d8f;\n  padding: 0.4rem 0.2rem;\n  color: #2a9d8f;\n  background-color: #f7f7f7;\n}\n\n#add-project-modal form button:hover,\n#add-modal-todo form button:hover,\n#edit-modal-todo form button:hover {\n  color: #f7f7f7;\n  background-color: #2a9d8f;\n}\n\n#add-modal-todo .button-container,\n#edit-modal-todo .button-container {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n\n#add-modal-todo .priority-btn-grup,\n#edit-modal-todo .priority-btn-grup {\n  display: flex;\n  gap: 0.8rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.priority-btn-grup button {\n  min-width: 4.5rem;\n}\n\n.priority-btn-grup #low {\n  color: #2a9d8f;\n  border-color: #2a9d8f;\n}\n\n.priority-btn-grup #low:hover,\n.priority-btn-grup #low.active-priority {\n  color: #f7f7f7;\n  background-color: #2a9d8f;\n}\n\n.priority-btn-grup #medium {\n  color: #ffa500;\n  border-color: #ffa500;\n}\n\n.priority-btn-grup #medium:hover,\n.priority-btn-grup #medium.active-priority {\n  color: #f7f7f7;\n  background-color: #ffa500;\n}\n\n.priority-btn-grup #high {\n  color: #ff0000;\n  border-color: #ff0000;\n}\n\n.priority-btn-grup #high:hover,\n.priority-btn-grup #high.active-priority {\n  color: #f7f7f7;\n  background-color: #ff0000;\n}\n\n/* Footer */\n.attribution {\n  text-align: center;\n  width: 100%;\n  padding-bottom: 0.3rem;\n  font-size: 0.7rem;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  z-index: 999;\n}\n\n.attribution a {\n  margin-left: 0.3rem;\n}\n'],sourceRoot:""}]);const f=A},314:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var s=[].concat(n[l]);o&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),e&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=e):s[2]=e),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},417:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var i={},a=[],d=0;d<n.length;d++){var c=n[d],l=o.base?c[0]+o.base:c[0],s=i[l]||0,A="".concat(l," ").concat(s);i[l]=s+1;var u=e(A),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var f=r(m,o);o.byIndex=d,t.splice(d,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var d=e(i[a]);t[d].references--}for(var c=o(n,r),l=0;l<i.length;l++){var s=e(i[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=c}}},659:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},540:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},56:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},113:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},569:(n,t,e)=>{n.exports=e.p+"52dfa12fd5d4293eb596.ttf"},984:(n,t,e)=>{n.exports=e.p+"7b3fd25fa49a4264418d.ttf"},76:(n,t,e)=>{n.exports=e.p+"3c0d70d256d0414ac405.svg"},554:(n,t,e)=>{n.exports=e.p+"9bd66912f4e2d92ccbf1.svg"},794:(n,t,e)=>{n.exports=e.p+"7c5ded05bcaab5e01973.svg"},420:(n,t,e)=>{n.exports=e.p+"ed8674d90641931cf659.svg"},529:(n,t,e)=>{n.exports=e.p+"338a05874332defd2666.svg"},817:(n,t,e)=>{n.exports=e.p+"e5afd804d47fb87ee262.svg"},270:(n,t,e)=>{n.exports=e.p+"1da8a652db957e39a62a.svg"}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return n[o](i,i.exports,e),i.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(n=t.currentScript.src),!n)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!n||!/^http(s?):/.test(n));)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,e.d({},{S5:()=>Pn,RG:()=>Wn,nB:()=>Ln,Ir:()=>Dn,X8:()=>Sn});var o=e(72),r=e.n(o),i=e(825),a=e.n(i),d=e(659),c=e.n(d),l=e(56),s=e.n(l),A=e(540),u=e.n(A),m=e(113),f=e.n(m),p=e(208),h={};h.styleTagTransform=f(),h.setAttributes=s(),h.insert=c().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=u(),r()(p.A,h),p.A&&p.A.locals&&p.A.locals;const g={mode:"all",project:null};class b{static idCounter=-1;constructor(n){this._id=b.calcId(),this._name=n,this._items=0,this._active=!1}static calcId(){return++b.idCounter}get id(){return this._id}get name(){return this._name}get items(){return this._items}get active(){return this._active}set name(n){this._name=n}calcItem(){this._items+=1}set items(n){console.log(n)}}Math.pow(10,8);const E=6048e5,B=864e5,y=Symbol.for("constructDateFrom");function C(n,t){return"function"==typeof n?n(t):n&&"object"==typeof n&&y in n?n[y](t):n instanceof Date?new n.constructor(t):new Date(t)}function w(n){return C(n,Date.now())}function v(n,...t){const e=C.bind(null,n||t.find((n=>"object"==typeof n)));return t.map(e)}function x(n,t){return C(t||n,n)}function k(n,t){const e=x(n,t?.in);return e.setHours(0,0,0,0),e}function j(n,t){return function(n,t,e){const[o,r]=v(e?.in,n,t);return+k(o)==+k(r)}(C(t?.in||n,n),w(t?.in||n))}let M={};function S(){return M}function T(n,t){const e=S(),o=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??e.weekStartsOn??e.locale?.options?.weekStartsOn??0,r=x(n,t?.in),i=r.getDay(),a=(i<o?7:0)+i-o;return r.setDate(r.getDate()-a),r.setHours(0,0,0,0),r}function D(n,t){return function(n,t,e){const[o,r]=v(e?.in,n,t);return+T(o,e)==+T(r,e)}(C(t?.in||n,n),w(t?.in||n),t)}function L(n=null,t,e,o=null){let r=null;if(o){if(r=t.find((n=>n.name===o)),r)return void alert("Project name cannot be duplicated");P(o,t),Ln(t,e)}else{if(!t.some((n=>"Default"===n.name))){const n=new b("Default");t.push(n)}const e=n.project;if(r=t.find((n=>n.name===e)),r)return;P(e,t)}}function P(n,t){const e=new b(n);return t.push(e),localStorage.setItem("projectsList",JSON.stringify(t)),t}function W(n,t=null,e){if(t){let e="";return n.forEach((n=>{e+=`\n                <li data-project-id="${n.id}">\n                    <a href="#" id="${n.id}" class="project-link ${n._active?"active":""}">${n.name}</a>\n                    <span class="number-of-tasks">${z(n.name,t)}</span>\n                </li>\n            `})),e}{let t="";return n.forEach((n=>{t+=`\n            <option value="${n.name}" ${e===n.name?"selected":""}>${n.name}</option>\n            `})),t}}function q(n){return{dueTodayTodos:n.filter((n=>j(new Date(n.dueDate))&&!n._status)),dueThisWeekTodos:n.filter((n=>D(new Date(n.dueDate))&&!n._status))}}function Y(n){const{dueTodayTodos:t,dueThisWeekTodos:e}=q(n);let o="";return o=`\n        <li><a href="#" id="home-link">Home</a><span class="number-of-tasks">${function(n){let t=0;return n.forEach((n=>{n.status||t++})),t}(n)}</span></li>\n        <li><a href="#" id="today-link">Due Today</a><span class="number-of-tasks">${t.length}</span></li>\n        <li><a href="#" id="week-link">Due This Week</a><span class="number-of-tasks">${e.length}</span></li>\n    `,o}function z(n,t){let e=0;for(let o=0;o<t.length;o++)t[o].project!==n||t[o].status||e++;return e}function O(){const n=document.querySelectorAll(".number-of-tasks");0===n.length&&console.log("handleProjectCountNumber: No elements found with the class 'number-of-tasks'."),n.forEach((n=>{0==n.innerHTML&&(n.style.display="none")}))}class ${static idCounter=-1;constructor(n,t,e,o,r,i){this._id=$.calcId(),this._title=n,this._description=t,this._dueDate=e,this._priority=o,this._status=r,this._project=i}static calcId(){return++$.idCounter}get id(){return this._id}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get status(){return this._status}get project(){return this._project}set status(n){this._status=n}}const N={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function I(n){return(t={})=>{const e=t.width?String(t.width):n.defaultWidth;return n.formats[e]||n.formats[n.defaultWidth]}}const H={date:I({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:I({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:I({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},_={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function F(n){return(t,e)=>{let o;if("formatting"===(e?.context?String(e.context):"standalone")&&n.formattingValues){const t=n.defaultFormattingWidth||n.defaultWidth,r=e?.width?String(e.width):t;o=n.formattingValues[r]||n.formattingValues[t]}else{const t=n.defaultWidth,r=e?.width?String(e.width):n.defaultWidth;o=n.values[r]||n.values[t]}return o[n.argumentCallback?n.argumentCallback(t):t]}}const X={ordinalNumber:(n,t)=>{const e=Number(n),o=e%100;if(o>20||o<10)switch(o%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:F({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:F({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:n=>n-1}),month:F({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:F({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:F({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function G(n){return(t,e={})=>{const o=e.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],i=t.match(r);if(!i)return null;const a=i[0],d=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(d)?function(n,t){for(let t=0;t<n.length;t++)if(n[t].test(a))return t}(d):function(n,t){for(const t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&n[t].test(a))return t}(d);let l;return l=n.valueCallback?n.valueCallback(c):c,l=e.valueCallback?e.valueCallback(l):l,{value:l,rest:t.slice(a.length)}}}const V={ordinalNumber:(J={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:n=>parseInt(n,10)},(n,t={})=>{const e=n.match(J.matchPattern);if(!e)return null;const o=e[0],r=n.match(J.parsePattern);if(!r)return null;let i=J.valueCallback?J.valueCallback(r[0]):r[0];return i=t.valueCallback?t.valueCallback(i):i,{value:i,rest:n.slice(o.length)}}),era:G({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:G({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:n=>n+1}),month:G({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:G({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:G({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var J;const Q={code:"en-US",formatDistance:(n,t,e)=>{let o;const r=N[n];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),e?.addSuffix?e.comparison&&e.comparison>0?"in "+o:o+" ago":o},formatLong:H,formatRelative:(n,t,e,o)=>_[n],localize:X,match:V,options:{weekStartsOn:0,firstWeekContainsDate:1}};function U(n){const t=x(n),e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),+n-+e}function R(n,t){const e=x(n,t?.in);return function(n,t,e){const[o,r]=v(e?.in,n,t),i=k(o),a=k(r),d=+i-U(i),c=+a-U(a);return Math.round((d-c)/B)}(e,function(n,t){const e=x(n,t?.in);return e.setFullYear(e.getFullYear(),0,1),e.setHours(0,0,0,0),e}(e))+1}function Z(n,t){return T(n,{...t,weekStartsOn:1})}function K(n,t){const e=x(n,t?.in),o=e.getFullYear(),r=C(e,0);r.setFullYear(o+1,0,4),r.setHours(0,0,0,0);const i=Z(r),a=C(e,0);a.setFullYear(o,0,4),a.setHours(0,0,0,0);const d=Z(a);return e.getTime()>=i.getTime()?o+1:e.getTime()>=d.getTime()?o:o-1}function nn(n,t){const e=x(n,t?.in),o=+Z(e)-+function(n,t){const e=K(n,t),o=C(t?.in||n,0);return o.setFullYear(e,0,4),o.setHours(0,0,0,0),Z(o)}(e);return Math.round(o/E)+1}function tn(n,t){const e=x(n,t?.in),o=e.getFullYear(),r=S(),i=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,a=C(t?.in||n,0);a.setFullYear(o+1,0,i),a.setHours(0,0,0,0);const d=T(a,t),c=C(t?.in||n,0);c.setFullYear(o,0,i),c.setHours(0,0,0,0);const l=T(c,t);return+e>=+d?o+1:+e>=+l?o:o-1}function en(n,t){const e=x(n,t?.in),o=+T(e,t)-+function(n,t){const e=S(),o=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??e.firstWeekContainsDate??e.locale?.options?.firstWeekContainsDate??1,r=tn(n,t),i=C(t?.in||n,0);return i.setFullYear(r,0,o),i.setHours(0,0,0,0),T(i,t)}(e,t);return Math.round(o/E)+1}function on(n,t){return(n<0?"-":"")+Math.abs(n).toString().padStart(t,"0")}const rn={y(n,t){const e=n.getFullYear(),o=e>0?e:1-e;return on("yy"===t?o%100:o,t.length)},M(n,t){const e=n.getMonth();return"M"===t?String(e+1):on(e+1,2)},d:(n,t)=>on(n.getDate(),t.length),a(n,t){const e=n.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.toUpperCase();case"aaa":return e;case"aaaaa":return e[0];default:return"am"===e?"a.m.":"p.m."}},h:(n,t)=>on(n.getHours()%12||12,t.length),H:(n,t)=>on(n.getHours(),t.length),m:(n,t)=>on(n.getMinutes(),t.length),s:(n,t)=>on(n.getSeconds(),t.length),S(n,t){const e=t.length,o=n.getMilliseconds();return on(Math.trunc(o*Math.pow(10,e-3)),t.length)}},an={G:function(n,t,e){const o=n.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(o,{width:"abbreviated"});case"GGGGG":return e.era(o,{width:"narrow"});default:return e.era(o,{width:"wide"})}},y:function(n,t,e){if("yo"===t){const t=n.getFullYear(),o=t>0?t:1-t;return e.ordinalNumber(o,{unit:"year"})}return rn.y(n,t)},Y:function(n,t,e,o){const r=tn(n,o),i=r>0?r:1-r;return"YY"===t?on(i%100,2):"Yo"===t?e.ordinalNumber(i,{unit:"year"}):on(i,t.length)},R:function(n,t){return on(K(n),t.length)},u:function(n,t){return on(n.getFullYear(),t.length)},Q:function(n,t,e){const o=Math.ceil((n.getMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return on(o,2);case"Qo":return e.ordinalNumber(o,{unit:"quarter"});case"QQQ":return e.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(o,{width:"narrow",context:"formatting"});default:return e.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,t,e){const o=Math.ceil((n.getMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return on(o,2);case"qo":return e.ordinalNumber(o,{unit:"quarter"});case"qqq":return e.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(o,{width:"narrow",context:"standalone"});default:return e.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,t,e){const o=n.getMonth();switch(t){case"M":case"MM":return rn.M(n,t);case"Mo":return e.ordinalNumber(o+1,{unit:"month"});case"MMM":return e.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(o,{width:"narrow",context:"formatting"});default:return e.month(o,{width:"wide",context:"formatting"})}},L:function(n,t,e){const o=n.getMonth();switch(t){case"L":return String(o+1);case"LL":return on(o+1,2);case"Lo":return e.ordinalNumber(o+1,{unit:"month"});case"LLL":return e.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(o,{width:"narrow",context:"standalone"});default:return e.month(o,{width:"wide",context:"standalone"})}},w:function(n,t,e,o){const r=en(n,o);return"wo"===t?e.ordinalNumber(r,{unit:"week"}):on(r,t.length)},I:function(n,t,e){const o=nn(n);return"Io"===t?e.ordinalNumber(o,{unit:"week"}):on(o,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getDate(),{unit:"date"}):rn.d(n,t)},D:function(n,t,e){const o=R(n);return"Do"===t?e.ordinalNumber(o,{unit:"dayOfYear"}):on(o,t.length)},E:function(n,t,e){const o=n.getDay();switch(t){case"E":case"EE":case"EEE":return e.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},e:function(n,t,e,o){const r=n.getDay(),i=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return on(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},c:function(n,t,e,o){const r=n.getDay(),i=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return on(i,t.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(r,{width:"narrow",context:"standalone"});case"cccccc":return e.day(r,{width:"short",context:"standalone"});default:return e.day(r,{width:"wide",context:"standalone"})}},i:function(n,t,e){const o=n.getDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return on(r,t.length);case"io":return e.ordinalNumber(r,{unit:"day"});case"iii":return e.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},a:function(n,t,e){const o=n.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(o,{width:"narrow",context:"formatting"});default:return e.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,t,e){const o=n.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){const o=n.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){let t=n.getHours()%12;return 0===t&&(t=12),e.ordinalNumber(t,{unit:"hour"})}return rn.h(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getHours(),{unit:"hour"}):rn.H(n,t)},K:function(n,t,e){const o=n.getHours()%12;return"Ko"===t?e.ordinalNumber(o,{unit:"hour"}):on(o,t.length)},k:function(n,t,e){let o=n.getHours();return 0===o&&(o=24),"ko"===t?e.ordinalNumber(o,{unit:"hour"}):on(o,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getMinutes(),{unit:"minute"}):rn.m(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getSeconds(),{unit:"second"}):rn.s(n,t)},S:function(n,t){return rn.S(n,t)},X:function(n,t,e){const o=n.getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return cn(o);case"XXXX":case"XX":return ln(o);default:return ln(o,":")}},x:function(n,t,e){const o=n.getTimezoneOffset();switch(t){case"x":return cn(o);case"xxxx":case"xx":return ln(o);default:return ln(o,":")}},O:function(n,t,e){const o=n.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+dn(o,":");default:return"GMT"+ln(o,":")}},z:function(n,t,e){const o=n.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+dn(o,":");default:return"GMT"+ln(o,":")}},t:function(n,t,e){return on(Math.trunc(+n/1e3),t.length)},T:function(n,t,e){return on(+n,t.length)}};function dn(n,t=""){const e=n>0?"-":"+",o=Math.abs(n),r=Math.trunc(o/60),i=o%60;return 0===i?e+String(r):e+String(r)+t+on(i,2)}function cn(n,t){return n%60==0?(n>0?"-":"+")+on(Math.abs(n)/60,2):ln(n,t)}function ln(n,t=""){const e=n>0?"-":"+",o=Math.abs(n);return e+on(Math.trunc(o/60),2)+t+on(o%60,2)}const sn=(n,t)=>{switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},An=(n,t)=>{switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},un={p:An,P:(n,t)=>{const e=n.match(/(P+)(p+)?/)||[],o=e[1],r=e[2];if(!r)return sn(n,t);let i;switch(o){case"P":i=t.dateTime({width:"short"});break;case"PP":i=t.dateTime({width:"medium"});break;case"PPP":i=t.dateTime({width:"long"});break;default:i=t.dateTime({width:"full"})}return i.replace("{{date}}",sn(o,t)).replace("{{time}}",An(r,t))}},mn=/^D+$/,fn=/^Y+$/,pn=["D","DD","YY","YYYY"];function hn(n){return!(!((t=n)instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t))&&"number"!=typeof n||isNaN(+x(n)));var t}const gn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,bn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,En=/^'([^]*?)'?$/,Bn=/''/g,yn=/[a-zA-Z]/;function Cn(n,t,e){const o=S(),r=e?.locale??o.locale??Q,i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,a=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,d=x(n,e?.in);if(!hn(d))throw new RangeError("Invalid time value");let c=t.match(bn).map((n=>{const t=n[0];return"p"===t||"P"===t?(0,un[t])(n,r.formatLong):n})).join("").match(gn).map((n=>{if("''"===n)return{isToken:!1,value:"'"};const t=n[0];if("'"===t)return{isToken:!1,value:wn(n)};if(an[t])return{isToken:!0,value:n};if(t.match(yn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:n}}));r.localize.preprocessor&&(c=r.localize.preprocessor(d,c));const l={firstWeekContainsDate:i,weekStartsOn:a,locale:r};return c.map((o=>{if(!o.isToken)return o.value;const i=o.value;return(!e?.useAdditionalWeekYearTokens&&function(n){return fn.test(n)}(i)||!e?.useAdditionalDayOfYearTokens&&function(n){return mn.test(n)}(i))&&function(n,t,e){const o=function(n,t,e){const o="Y"===n[0]?"years":"days of the month";return`Use \`${n.toLowerCase()}\` instead of \`${n}\` (in \`${t}\`) for formatting ${o} to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(n,t,e);if(console.warn(o),pn.includes(n))throw new RangeError(o)}(i,t,String(n)),(0,an[i[0]])(d,i,r.localize,l)})).join("")}function wn(n){const t=n.match(En);return t?t[1].replace(Bn,"'"):n}function vn(n){let t="";return n.forEach((n=>{t+=`\n            <li class="item" id="item-${n.id}">\n                <div class="name-grup ${n.status?"finished":""}">\n                    <div class="priority ${n.priority}"></div>\n                    <input type="checkbox" class="todo-checkbox" ${n.status?"checked":""}>\n                    <p class="finished">${n.title}</p>\n                </div>\n                <div class="action-grup ${n.status?"finished":""}">\n                    <p id="due-date">${Cn(new Date(n.dueDate),"MMM do")}</p>\n                    <button class="view-btn" id="view-btn-${n.id}"><img src="${e(270)}"></button>\n                    <button class="edit-btn" id="edit-btn-${n.id}"><img src="${e(529)}"></button>\n                    <button class="delete-btn" id="delete-btn-${n.id}"><img src="${e(420)}"></button>\n                </div>\n            </li>\n        `})),t}function xn(n,t){return n.filter((n=>n.project===t))}const kn=function(){let n=JSON.parse(localStorage.getItem("todoList"))||[],t=JSON.parse(localStorage.getItem("projectsList"))||[];return n&&0!==n.length?(n=JSON.parse(localStorage.getItem("todoList")).map((n=>new $(n._title,n._description,n._dueDate,n._priority,n._status,n._project))),t=JSON.parse(localStorage.getItem("projectsList")).map((n=>new b(n._name)))):(n=[new $("Write on blog","Write about last part from TicTacToe game","2025-01-29","low",!1,"Home"),new $("TheOdinProject chapter 2","Finish theOdinProject chapter 2","2025-01-28","low",!1,"Home"),new $("New Odin Chapter","Start a new OdinProjectChapter","2025-01-30","medium",!1,"Learning"),new $("Repair blog","Fix social links on blog header","2025-01-27","high",!1,"Learning"),new $("Read daily a pattern","https://www.patterns.dev/vanilla/import-on-interaction","2025-01-30","high",!0,"Learning"),new $("App implementation","Add ability to extract the projects from the array","2025-01-30","low",!0,"Active learning"),new $("Xyx","Some random text","2025-01-29","low",!0,"Active learning"),new $("ABC","First three letters from the alphabet","2025-01-29","high",!1,"Active learning")],t=[],n.forEach((n=>{L(n,t)}))),localStorage.setItem("todoList",JSON.stringify(n)),localStorage.setItem("projectsList",JSON.stringify(t)),Sn(t,n),{todoList:n,projectsList:t,renderOnlyContainer:!1}}();function jn(){const n=e(554),t=document.getElementById("modal-header"),o=new Image;o.src=n,o.classList.add("close-todo-modal-button"),o.classList.add("close-btn"),t.appendChild(o)}function Mn(n){n.querySelectorAll(".close-btn").forEach((t=>{t.addEventListener("click",(function(){n.innerHTML=""}))}))}function Sn(n,t){let o=document.querySelector(".container");o||(o=document.createElement("div"),o.classList.add("container"),document.body.appendChild(o));const r=`\n        <section class="header" id="section-header">\n            <h1>// To do</h1>\n                \n        </section>\n        <div class="content-container">\n            <section class="menu">\n                <ul id="todos-due" class="menu-links">\n                    ${Y(t)}\n                </ul>\n                <ul id="projects" class="menu-links">\n                    ${W(n,t)}\n                </ul>\n                <div class="buttons-container">\n                    <div class="addtodo">\n                        <img id="addtodo-img">\n                        <p>New To do</p>\n                    </div>\n                    <div class="addproject">\n                        <img id="addproject-img">\n                        <p>New Project</p>\n                    </div>\n                </div>\n            </section>\n            <section class="todo-container">\n              <div id="current-section"><p>${Tn()}</p></div>\n              <ul class="items-list" id="item-list-X-X">\n                  ${vn(t)}\n              </ul>\n            </section>\n        </div>\n        <div id="modal-container"></div>\n    `;o.innerHTML=r,0==t.length&&(Dn(t,'<p class="emptyPageNotification">There are no more todos.</p>'),localStorage.setItem("todoList",JSON.stringify(t)));const i=e(817),a=document.getElementById("section-header"),d=new Image;d.src=i,a.appendChild(d),O(),function(){const n=e(76),t=document.getElementById("addtodo-img"),o=document.getElementById("addproject-img");t.src=n,o.src=n}(),function(n,t){const e=document.getElementById("todos-due"),o=document.getElementById("projects"),r=document.querySelector(".addproject"),i=document.querySelector(".addtodo"),a=document.querySelector(".todo-container");let d=document.getElementById("modal-container");e&&e.addEventListener("click",(e=>{const o=e.target;"today-link"===o.id?function(n){const{dueTodayTodos:t}=q(n);g.mode="todayView",Dn(t,null,null)}(n):"week-link"===o.id?function(n){const{dueThisWeekTodos:t}=q(n);g.mode="weekView",Dn(t,null,null)}(n):"home-link"===o.id&&(g.mode="all",g.project=null,Sn(t,n))})),o&&(o.removeEventListener("click",qn),o.addEventListener("click",qn)),i&&i.addEventListener("click",(()=>function(n,t){n.innerHTML="",n.innerHTML=`\n    <div id="add-modal-todo" class="modal active">\n        <div class="modal-content">\n            <div id="modal-header">\n                <p>Create a new To Do</p>\n            </div>\n            <form action="">\n                <ul class="input-container">\n                    <li>\n                        <label for="title">Title</label>\n                        <input type="text" id="title" required>\n                    </li>\n                    <li>\n                        <label for="description">Description</label>\n                        <input type="text" id="description">\n                    </li>\n                    <li>    \n                        <label for="project">Project</label>\n                        <select id="projects-select" name="projects">\n                            ${W(t)}    \n                        </select> \n                    </li>\n                    <li>    \n                        <label for="duedate">Due date:</label>\n                        <input type="date" id="duedate">\n                    </li>\n                </ul>\n\n                <div class="button-container">  \n                    <div class="priority-btn-grup">\n                        <label for="priority">Priority:</label>\n                        <button type="button" id="low" class="active-priority" type="button">Low</button>\n                        <button type="button" id="medium" type="button">Medium</button>\n                        <button type="button" id="high" type="button">High</button>\n                    </div>\n\n                    <button id="create-todo">Create To do</button> \n                </div> \n            </form>\n            \n        </div>\n    </div>\n    `,jn(),Mn(n)}(d,t))),r&&r.addEventListener("click",(()=>function(n){n.innerHTML="",n.innerHTML='\n    <div id="add-project-modal" class="modal active">\n        <div class="modal-content">\n            <div id="modal-header">\n                <p>Create a new Project</p>\n            </div>\n            <form>\n                <div class="input-container">\n                    <label for="name">Project name: </label>\n                    <input type="text" id="name" required>\n                </div>\n                <button id="create-project">Create project</button>\n            </form>\n            \n        </div>\n    </div>\n    ',jn(),Mn(n)}(d))),a&&(a.removeEventListener("click",Yn),a.addEventListener("click",(e=>Yn(n,t,d,e)))),d.addEventListener("click",(function(e){const o=document.querySelectorAll(".priority-btn-grup button");if(o.forEach((n=>{n.addEventListener("click",(function(n){n.preventDefault(),o.forEach((n=>n.classList.remove("active-priority"))),this.classList.add("active-priority")}))})),e.target&&"create-todo"===e.target.id){e.preventDefault();const o=document.getElementById("title").value.trim(),r=document.getElementById("title").value.trim(),i=document.getElementById("projects-select").value,a=document.querySelector('input[type="date"]').value,c=document.querySelector(".priority-btn-grup .active-priority"),l=c?c.id:null;if(!(o&&i&&a&&l))return void alert("Required fields: Title and Date");!function(n,t,e,o,r,i,a){const d=new $(n,t,o,r,!1,e);!function(n,t){return t.some((t=>t.title===n.title))}(d,i)?(i.push(d),localStorage.setItem("todoList",JSON.stringify(i)),Sn(a,i)):alert("Title needs to be unique")}(o,r,i,a,l,n,t),d.innerHTML=""}if(e.target&&"create-project"===e.target.id){e.preventDefault();const o=document.querySelector("#name").value.trim();if(0===o.length)return void alert("Project name cannot be empty");L(null,t,n,o),d.innerHTML=""}if(e.target&&"edit-modal-todo"===e.target.id){e.preventDefault();const o=document.getElementsByTagName("form")[0].dataset.formid,r=document.getElementById("title").value.trim(),i=document.getElementById("description").value.trim(),a=document.getElementById("projects-select").value,d=document.querySelector('input[type="date"]').value,c=document.querySelector(".priority-btn-grup .active-priority");!function(n,t,e,o,r,i,a,d){const c=a[n];c._title=t,c._description=e,c._project=o,c._dueDate=r,c._priority=i,localStorage.setItem("todoList",JSON.stringify(a)),Sn(d,a)}(o,r,i,a,d,c?c.id:null,n,t)}}))}(t,n)}function Tn(){let n;return n="todayView"===g.mode?"Due today":"weekView"===g.mode?"Due this week":"projectView"===g.mode?`Project: ${g.project}`:"Index",n}function Dn(n,t=null,e=null){let o=document.querySelector(".todo-container");o.innerHTML="",n.length>0?o.innerHTML=`\n        <div id="current-section"><p>${Tn()}</p></div>\n        <ul class="items-list">\n            ${vn(n)}  \n        </ul>\n    `:(o.innerHTML=`\n        <div class="items-list">\n            ${t}\n        </div>\n        `,t||(o.innerHTML='\n            <div class="items-list">\n                <h2>Empty Project!</h2>\n                <p>Create a new to-do item or delete project.</p>\n                <button class="project-delete-btn">Delete project</button>\n            </div>\n            '),"todayView"===g.mode&&(o.innerHTML='\n      <div class="items-list">\n          <p>No todos with the due date today.</p>\n      </div>\n      '),"weekView"===g.mode&&(o.innerHTML='\n      <div class="items-list">\n          <p>No todos with the due date this week.</p>\n      </div>\n      '),Pn())}function Ln(n,t){let e=document.getElementById("projects");e.innerHTML="",e.innerHTML=`\n        ${W(n,t)}\n    `,O()}function Pn(){let n=document.querySelector(".todo-container");const{projectsList:t,todoList:e}=kn,o=n.querySelector(".project-delete-btn");"projectView"===g.mode&&(!function(n,t){if(1===t.length)return;t.find((t=>t.name==n))._id}(g.project,t),o&&o.addEventListener("click",(function(){!function(n,t,e){const o=t.findIndex((t=>t.id==n)),r=z(t.find((t=>t.id==n)).name,e);-1!==o&&0==r&&(t.splice(o,1),g.mode="all",g.project=null,localStorage.setItem("projectsList",JSON.stringify(t)),Sn(t,e))}(idToDelete,t,e)})))}function Wn(n){let t=document.getElementById("todos-due");t.innerHTML="",t.innerHTML=`\n        ${Y(n)}\n    `}function qn(n){g.mode="projectView";const{todoList:t}=kn,e=n.target;if("A"===e.tagName){n.preventDefault();const o=e.textContent.trim();g.project=o,Dn(xn(t,o),null,null)}}function Yn(n,t,o,r){const i=r.target,a=i.closest(".item");if(null===a)return;const d=a?+a.id.split("-")[1]:null,c=n.findIndex((n=>n._id===d));-1!==c?i.closest(".view-btn")?function(n,t,o){o.innerHTML="",o.innerHTML=`\n    <div id="view-modal" class="modal active">\n        <div class="modal-content">\n            <img id="close-elipse" class="close-modal-button close-btn">\n            <h2>${t[n].title}</h2>\n            <div class="detail">\n                <p class="detail-title">Project: </p>\n                <p>${t[n].project}</p>\n            </div>\n            <div class="detail">\n                <p class="detail-title">Priority: </p>\n                <p>${t[n].priority}</p>\n            </div>\n            <div class="detail">\n                <p class="detail-title">Due Date: </p>\n                <p>${Cn(new Date(t[n].dueDate),"do MMM yyy")}</p>\n            </div>\n            <div class="detail">\n                <p class="detail-title">Details: </p>\n                <p>${t[n].description}</p>\n            </div>\n        </div>    \n    </div>\n    `,function(){const n=e(794);document.getElementById("close-elipse").src=n}(),Mn(o)}(c,n,o):i.closest(".edit-btn")?n[c]?function(n,t,e,o){o.innerHTML="",o.innerHTML=`\n    <div id="edit-modal-todo" class="modal active">\n        <div class="modal-content">\n            <div id="modal-header">\n                <p>Edit To Do</p>\n            </div>\n            <form data-formid="${t[n].id}">\n                <ul class="input-container">\n                    <li>\n                        <label for="title">Title</label>\n                        <input type="text" id="title" value="${t[n].title}">\n                    </li>\n                    <li>\n                        <label for="description">Description</label>\n                        <input type="text" id="description" value="${t[n].description}">\n                    </li>\n                    <li>    \n                        <label for="project">Project</label>\n                        <select id="projects-select" name="projects">\n                            ${W(e,null,t[n].project)} \n                        </select> \n                    </li>\n                    <li>    \n                        <label for="duedate">Due date:</label>\n                        <input type="date" id="duedate" value="${t[n].dueDate}">\n                    </li>\n                </ul>\n\n                <div class="button-container">  \n                    <div class="priority-btn-grup">\n                        <label for="priority">Priority:</label>\n                        <button type="button" id="low" class="${"low"===t[n].priority?"active-priority":""}">Low</button>\n                        <button type="button" id="medium" class="${"medium"===t[n].priority?"active-priority":""}">Medium</button>\n                        <button type="button" id="high" class="${"high"===t[n].priority?"active-priority":""}">High</button>\n                    </div>\n\n                    <button id="edit-modal-todo">Confirm edit</button> \n                </div> \n            </form>\n            \n        </div>\n    </div>\n    `,jn(),Mn(o)}(c,n,t,o):console.error(`Todo with ID ${d} does not exist.`):i.closest(".delete-btn")?function(n,t,e){if(!(t.length<1))if(n>=0&&n<t.length){if(t.splice(n,1),localStorage.setItem("todoList",JSON.stringify(t)),"projectView"===g.mode){const n=g.project;Dn(xn(t,n),null,n)}else if("todayView"===g.mode){const{dueTodayTodos:n}=q(t);Dn(n,null,null)}else if("weekView"===g.mode){const{dueThisWeekTodos:n}=q(t);Dn(n,null,null)}else Sn(e,t);Ln(e,t),Wn(t),O(),0===t.length&&(console.log("(todoList.length === 0) case"),Pn())}else console.error("Invalid todo index:",n)}(c,n,t):i.classList.contains("todo-checkbox")&&function(n,t,e,o){const r=o.find((t=>t.id==n));if(r.status=t.checked,r){if("todayView"===g.mode){const{dueTodayTodos:n}=q(o);Dn(n,null,null)}else if("weekView"===g.mode){const{dueThisWeekTodos:n}=q(o);Dn(n,null,null)}else"projectView"===g.mode?Dn(xn(o,g.project),null,g.project):Sn(e,o);localStorage.setItem("todoList",JSON.stringify(o)),Wn(o),Ln(e,o),O()}}(d,i,t,n):console.error("Todo item not found in todoList for elementId:",d)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,